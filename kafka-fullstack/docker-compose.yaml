version: "3.8"

services:

  grafana:
    image: grafana/grafana:8.4.5
    ports:
      - "3000:3000"
    environment:
      GF_PATHS_DATA: /var/lib/grafana
      GF_SECURITY_ADMIN_PASSWORD: kafka
    volumes:
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    container_name: grafana
    depends_on:
      - prometheus

  prometheus:
    image: prom/prometheus:v2.34.0
    ports:
      - "9090:9090"
    volumes:
      - ./etc/prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
    command: "--config.file=/etc/prometheus/prometheus.yml"
    container_name: prometheus

  jmx-kafka101:
    image: "sscaling/jmx-prometheus-exporter"
    ports:
      - "5556:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
    volumes:
      - ./etc/jmx_exporter/config_kafka101.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka101
    depends_on:
      - kafka101

  jmx-kafka102:
    image: "sscaling/jmx-prometheus-exporter"
    ports:
      - "5557:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
    volumes:
      - ./etc/jmx_exporter/config_kafka102.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka102
    depends_on:
      - kafka102

  jmx-kafka103:
    image: "sscaling/jmx-prometheus-exporter"
    ports:
      - "5558:5556"
    environment:
      CONFIG_YML: "/etc/jmx_exporter/config.yml"
    volumes:
      - ./etc/jmx_exporter/config_kafka103.yml:/etc/jmx_exporter/config.yml
    container_name: jmx-kafka103
    depends_on:
      - kafka103


  zookeeper:
    image: confluentinc/cp-zookeeper:7.3.1
    container_name: zookeeper
    restart: unless-stopped
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
    healthcheck:
      test: "echo stat | nc localhost $$ZOOKEEPER_CLIENT_PORT"

  kafka101:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka101
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9991:9991"
      - "29092:29092"
    environment:
      KAFKA_BROKER_ID: 101
      KAFKA_JMX_PORT: 9991
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka101:9092,PLAINTEXT_HOST://10.1.117.217:29092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 20971520
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 20971520
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 20971520
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # \ ksqldb-server requires these properties
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1            # /
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]

  kafka102:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka102
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9093:9093"
      - "9992:9992"
      - "29093:29093"
    environment:
      KAFKA_BROKER_ID: 102
      KAFKA_JMX_PORT: 9992
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka102:9093,PLAINTEXT_HOST://10.1.117.217:29093
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 20971520
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 20971520
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 20971520
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # \ ksqldb-server requires these properties
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1            # /
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]

  kafka103:
    image: confluentinc/cp-kafka:7.3.1
    container_name: kafka103
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9094:9094"
      - "9993:9993"
      - "29094:29094"
    environment:
      KAFKA_BROKER_ID: 103
      KAFKA_JMX_PORT: 9993
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka103:9094,PLAINTEXT_HOST://10.1.117.217:29094
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_REPLICA_FETCH_MAX_BYTES: 20971520
      KAFKA_PRODUCER_MAX_REQUEST_SIZE: 20971520
      KAFKA_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      CONNECT_PRODUCER_MAX_REQUEST_SIZE: 20971520
      CONNECT_CONSUMER_MAX_PARTITION_FETCH_BYTES: 20971520
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1 # \ ksqldb-server requires these properties
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1            # /
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9092" ]


  schema-registry:
    image: confluentinc/cp-schema-registry:7.3.1
    container_name: schema-registry
    restart: unless-stopped
    depends_on:
      - kafka101
      - kafka102
      - kafka103
    ports:
      - "8081:8081"
    environment:
      SCHEMA_REGISTRY_KAFKASTORE_BOOTSTRAP_SERVERS: kafka101:9092,kafka102:9093,kafka103:9094
      SCHEMA_REGISTRY_HOST_NAME: schema-registry
      SCHEMA_REGISTRY_LISTENERS: http://0.0.0.0:8081
    healthcheck:
      test: "curl -f http://localhost:8081 || exit 1"

  schema-registry-ui:
    image: landoop/schema-registry-ui:0.9.5
    container_name: kafka-schema-registry-ui
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "8001:8000"
    environment:
      SCHEMAREGISTRY_URL: http://schema-registry:8081
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"

  kafka-rest-proxy:
    image: confluentinc/cp-kafka-rest:7.3.1
    container_name: kafka-rest-proxy
    restart: unless-stopped
    depends_on:
      - zookeeper
      - kafka102
      - kafka103
      - kafka101
    ports:
      - "8082:8082"
    environment:
      KAFKA_REST_BOOTSTRAP_SERVERS: PLAINTEXT://kafka101:9092,PLAINTEXT://kafka102:9093,PLAINTEXT://kafka103:9094
      KAFKA_REST_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_REST_HOST_NAME: kafka-rest-proxy
      KAFKA_REST_LISTENERS: http://0.0.0.0:8082
      KAFKA_REST_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      KAFKA_REST_CONSUMER_REQUEST_TIMEOUT_MS: 30000
    healthcheck:
      test: "curl -f http://localhost:8082 || exit 1"

  kafka-topics-ui:
    image: landoop/kafka-topics-ui:0.9.4
    container_name: kafka-topics-ui
    restart: unless-stopped
    depends_on:
      - kafka-rest-proxy
    ports:
      - "8085:8000"
    environment:
      KAFKA_REST_PROXY_URL: http://kafka-rest-proxy:8082
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"

  kafka-target-connect:
    build: docker/kafka-source-connect
    container_name: kafka-target-connect
    restart: unless-stopped
    depends_on:
      - schema-registry
    ports:
      - "18083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka101:9092,kafka102:9093,kafka103:9094
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_PARTITIONS: 3
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_PARTITIONS: 3
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-target-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"

    healthcheck:
      test: "curl -f http://localhost:$$CONNECT_REST_PORT || exit 1"

  kafka-target-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    container_name: kafka-target-connect-ui
    restart: unless-stopped
    depends_on:
      - kafka-target-connect
    ports:
      - "8087:8001"
    environment:
      CONNECT_URL: http://kafka-target-connect:18083
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"

  kafka-source-connect:
    build: docker/kafka-source-connect
    container_name: kafka-source-connect
    restart: unless-stopped
    depends_on:
      - schema-registry

    ports:
      - "8083:8083"
    environment:
      CONNECT_BOOTSTRAP_SERVERS: kafka101:9092,kafka102:9093,kafka103:9094
      CONNECT_REST_PORT: 8083
      CONNECT_GROUP_ID: compose-connect-group
      CONNECT_CONFIG_STORAGE_TOPIC: docker-connect-configs
      CONNECT_CONFIG_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_OFFSET_STORAGE_TOPIC: docker-connect-offsets
      CONNECT_OFFSET_STORAGE_PARTITIONS: 3
      CONNECT_OFFSET_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_STATUS_STORAGE_TOPIC: docker-connect-status
      CONNECT_STATUS_STORAGE_PARTITIONS: 3
      CONNECT_STATUS_STORAGE_REPLICATION_FACTOR: 3
      CONNECT_KEY_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_KEY_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_VALUE_CONVERTER: io.confluent.connect.avro.AvroConverter
      CONNECT_VALUE_CONVERTER_SCHEMA_REGISTRY_URL: http://schema-registry:8081
      CONNECT_INTERNAL_KEY_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_INTERNAL_VALUE_CONVERTER: org.apache.kafka.connect.json.JsonConverter
      CONNECT_REST_ADVERTISED_HOST_NAME: kafka-source-connect
      CONNECT_LOG4J_ROOT_LOGLEVEL: INFO
      CONNECT_LOG4J_LOGGERS: "org.apache.kafka.connect.runtime.rest=WARN,org.reflections=ERROR"
      CONNECT_PLUGIN_PATH: "/usr/share/kafka/plugins"

    healthcheck:
      test: "curl -f http://localhost:$$CONNECT_REST_PORT || exit 1"

  kafka-source-connect-ui:
    image: landoop/kafka-connect-ui:0.9.7
    container_name: kafka-source-connect-ui
    restart: unless-stopped
    depends_on:
      - kafka-source-connect
    ports:
      - "8086:8000"
    environment:
      CONNECT_URL: http://kafka-source-connect:8083
      PROXY: "true"
    healthcheck:
      test: "wget --quiet --tries=1 --spider http://localhost:8000 || exit 1"




  kafka-manager:
    image: hlebalbau/kafka-manager:3.0.0.5
    container_name: kafka-manager
    restart: unless-stopped
    depends_on:
      - zookeeper
    ports:
      - "9000:9000"
    environment:
      ZK_HOSTS: zookeeper:2181
      APPLICATION_SECRET: "random-secret"
    command: -Dpidfile.path=/dev/null
    healthcheck:
      test: "curl -f http://localhost:9000 || exit 1"